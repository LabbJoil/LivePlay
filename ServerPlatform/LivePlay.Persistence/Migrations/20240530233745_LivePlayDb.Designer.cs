// <auto-generated />
using System;
using LivePlay.Server.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LivePlay.Server.Persistence.Migrations
{
    [DbContext(typeof(LivePlayDbContext))]
    [Migration("20240530233745_LivePlayDb")]
    partial class LivePlayDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.CouponEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Coupon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinalDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.FeedbackEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte>("Rate")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.HotelEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.NewsEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.PermissionEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Delete"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Update"
                        });
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.QRQuestEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QRInfo")
                        .HasColumnType("integer");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestId")
                        .IsUnique();

                    b.ToTable("QRQuest");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.QuestEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionFull")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionMini")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinalDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Reward")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.QuestionQuestEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FouthAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThirdAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestId")
                        .IsUnique();

                    b.ToTable("QuestionQuest");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.RoleEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.UserEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("HotelEntityModelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HotelEntityModelId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.HotelQuestEntityModel", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer");

                    b.HasKey("HotelId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("HotelQuest");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.RolePermissionEntityModel", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.UserCouponEntityModel", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GetDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CouponId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCoupon");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.UserQuestEntityModel", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GetDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QuestId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuest");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.UserRoleEntityModel", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.FeedbackEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.UserEntityModel", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.QRQuestEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.QuestEntityModel", "Quest")
                        .WithOne("QRQuest")
                        .HasForeignKey("LivePlay.Persistence.EntityModels.Base.QRQuestEntityModel", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.QuestionQuestEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.QuestEntityModel", "Quest")
                        .WithOne("QuestionQuest")
                        .HasForeignKey("LivePlay.Persistence.EntityModels.Base.QuestionQuestEntityModel", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.UserEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.HotelEntityModel", null)
                        .WithMany("Users")
                        .HasForeignKey("HotelEntityModelId");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.HotelQuestEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.HotelEntityModel", null)
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LivePlay.Persistence.EntityModels.Base.QuestEntityModel", null)
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.RolePermissionEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.PermissionEntityModel", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LivePlay.Persistence.EntityModels.Base.RoleEntityModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.UserCouponEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.CouponEntityModel", null)
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LivePlay.Persistence.EntityModels.Base.UserEntityModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.UserQuestEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.QuestEntityModel", null)
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LivePlay.Persistence.EntityModels.Base.UserEntityModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.ManyMany.UserRoleEntityModel", b =>
                {
                    b.HasOne("LivePlay.Persistence.EntityModels.Base.RoleEntityModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LivePlay.Persistence.EntityModels.Base.UserEntityModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.HotelEntityModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.QuestEntityModel", b =>
                {
                    b.Navigation("QRQuest")
                        .IsRequired();

                    b.Navigation("QuestionQuest")
                        .IsRequired();
                });

            modelBuilder.Entity("LivePlay.Persistence.EntityModels.Base.UserEntityModel", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
